name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install Python dependencies
      run: |
        cd convert
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Convert video to ASCII
      run: |
        chmod +x convert/run.sh
        npm run toAscii
    
    - name: Install package dependencies
      run: |
        cd package
        npm install --no-package-lock
    
    - name: Run tests
      run: |
        cd package
        timeout 15s node test.js || true
    
    - name: Test Rollup example
      run: |
        cd package
        timeout 10s node example-rollup.js || true

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install Python dependencies
      run: |
        cd convert
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Convert video to ASCII
      run: |
        chmod +x convert/run.sh
        npm run toAscii
    
    - name: Copy ASCII video to package
      run: cp output/ascii_video.json package/
    
    - name: Check if version exists
      id: check_version
      run: |
        cd package
        VERSION=$(node -p "require('./package.json').version")
        if npm view ascii-build-player@$VERSION version 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Publish to NPM
      if: steps.check_version.outputs.exists == 'false'
      run: |
        cd package
        echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > .npmrc
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}